R = +1 # движение вправо (воспользуемся числом +1, чтобы сразу увеличивать индекс текущего положения УУ)
L = -1 # движение влево (воспользуемся числом -1, чтобы сразу уменьшать индекс текущего положения УУ)
S = 0  # остановка (будем проверять на ноль/ложь)

# все три числа внизу представляют собой индекс в tuple текущего ряда таблицы. 
# сам ряд состояния в программе выглядит, например, так:
# ((0, R, 'A'), (1, R, 'B')) - это tuple, состоящий из двух tuples. Расшифровывается это так:
# (0, R, 'A') - что делать, если текущий символ под УУ 0: изменить его на 0, подвинуться вправо, перейти в состояние A
# (1, R, 'B') - что делать, если текущий символ под УУ 1: изменить его на 1, подвинуться вправо, перейти в состояние B
CHANGE_TO  = 0 
MOVE_TO    = 1 
NEXT_STATE = 2  


# функция, осуществляющая интерпретацию программы принимает 
# 1) программу, 
# 2) ленту машины с входными данными,
# 3) начальное состояние,
# 4) начальную ячейку на ленте

def change_char_to_num(elem):
    if(elem == 'a'): return 0
    elif(elem == 'b'): return 1
    else: return 2

def turing_machine(program, tape, start_state, current_cell):
  current_state = start_state

  # бесконечный цикл до тех пор, пока мы не увидим в указании MOVE_TO слово STOP (S)
  while (True):
      # получить ряды таблицы текущего состояния (извлечь из dictionary)
      rows = program[current_state] 
      # получить текущий ряд состояния (если в ячейке написан 0, взять первый ряд tuple; если 1 - взять второй ряд)
      current_row = rows[change_char_to_num(tape[current_cell])]
      print(current_row)
      # заменить текущий символ под УУ на символ из текущего ряда таблицы
      tape[current_cell] = current_row[CHANGE_TO]
      # выйти из цикла, если в следующем указании движения написано STOP, то есть число 0 ("ложь")
      if not current_row[MOVE_TO]: break
      # передвинуть УУ (если в текущем ряду написано R (+1) - увеличить индекс, если L (-1) - уменьшить индекс
      current_cell += current_row[MOVE_TO]

      # перейти в следующее состояние
      current_state = current_row[NEXT_STATE]
  return tape # вернуть ленту в ее новом состоянии

# вызовем функцию (то есть, запустим машину) с программой прибавления единицы
output = turing_machine({ # сама программа это Python dictionary, в котором каждому состоянию соответствуют два ряда):
    'A' : ((0, R, 'A'), (0, R, 'B'), (0, R, 'B')),
    'B' : (('b', S, 'C'), ('b', R, 'B'), (0, R, 'B')),
    'C' : ((0, S, 'C'), (1, S, 'C'), (1, R, 'B'))},
    # список, представляющий входное состояние ленты машины
    list("00abb0000"),
    # начальное состояние - A
    "A", 
    # начальная ячейка - самая левая (индекс 0)
    0)

print(output)